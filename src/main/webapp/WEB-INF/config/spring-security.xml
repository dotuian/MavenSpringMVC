<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/security
                        http://www.springframework.org/schema/security/spring-security.xsd">

<!-- 
　　Spring Security3的使用中，有4种方法：
　　一种是全部利用配置文件，将用户、权限、资源(url)硬编码在xml文件中，已经实现过，并经过验证；
　　二种是用户和权限用数据库存储，而资源(url)和权限的对应采用硬编码配置，目前这种方式已经实现，并经过验证。
　　三种是细分角色和权限，并将用户、角色、权限和资源均采用数据库存储，并且自定义过滤器，代替原有的FilterSecurityInterceptor过滤器，
    并分别实现AccessDecisionManager、InvocationSecurityMetadataSourceService和UserDetailsService，并在配置文件中进行相应配置。
    目前这种方式已经实现，并经过验证。
　　四是修改spring security的源代码，主要是修改InvocationSecurityMetadataSourceService和UserDetailsService两个类。
 -->


	<http pattern="/resources/**" security="none" />

	<!-- 
		http: 部分配置如何拦截用户请求。auto-config='true'将自动配置几种常用的权限控制机制，包括 form, anonymous, rememberMe 
		intercept-url: 来判断用户需要具有何种权限才能访问对应的 url资源 当用户访问的 url 资源满足多个 intercepter-url 
		时，系统将使用第一个符合条件的intercept-url 进行权限控制。
	-->
	<http auto-config="true">
	
	    <!-- 对登录页面，所有的用户都可以访问 -->
        <intercept-url pattern="/site/login" access="permitAll" /> 
	
		<intercept-url pattern="/user/**" access="ROLE_ADMIN" />
		<intercept-url pattern="/sample/**" access="ROLE_USER" />
		
		<intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')"></intercept-url>
		
		<!-- 
			default-target-url表示登陆成功时，跳转到哪个页面
		 -->
		<form-login login-page="/site/login" login-processing-url="/j_spring_security_check" 
			authentication-failure-url="/site/login?error" default-target-url="/site/index"/>
		
		<logout logout-success-url="/j_spring_security_logout"></logout>
		
		<csrf/>
	</http>



	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="userDetailsService" />

<!-- 		<authentication-provider ref="myAuthenticationProvider"/> -->

	</authentication-manager>
	
	<beans:bean id="myAuthenticationProvider" class="com.dotuian.springmvc.common.security.MyAuthenticationProvider"></beans:bean>
	
	
	<beans:bean id="userDetailsService" class="com.dotuian.springmvc.common.security.MyUserDetailsService"/>
	
	
<!--     <beans:bean id="loginFailureHandler" class="com.dotuian.springmvc.common.security.LoginFailureHandler" /> -->
<!--     <beans:bean id="loginSuccessHandler" class="com.dotuian.springmvc.common.security.LoginSuccessHandler" /> -->

</beans:beans>